{$I Defines.inc}

type
  HVar = type helper for TVar
    function TArray(const aSize: Integer = 1): TArr; overload;
    function T2DArray(const size1D: Integer = 1; const size2D: Integer = 1): T2DArr; overload;
   {$IFDEF Integer}
      function ClampMin(const limit: Integer): Integer;
      function ClampMax(const limit: Integer): Integer;
      function Clamp(const minimum, maximum: Integer): Integer; overload;
      function Clamp(const range: TRange): Integer; overload;
      function BoundMin(const limit: Integer): Integer;
      function BoundMax(const limit: Integer): Integer;
      function Bound(const minimum, maximum: Integer): Integer;
      function RestrictMin(const limit: Integer): Integer;
      function RestrictMax(const limit: Integer): Integer;
      function Restrict(const minimum, maximum: Integer): Integer;
      function LimitMin(const limit: Integer): Integer;
      function LimitMax(const limit: Integer): Integer;
      function Limit(const minimum, maximum: Integer): Integer;
      function ConstraintMin(const limit: Integer): Boolean;
      function ConstraintMax(const limit: Integer): Boolean;
      function Constraint(const minimum, maximum: Integer): Boolean; overload;
      function Constraint(const range: TRange): Boolean; overload;
      function Parity: Byte; inline;
      function Even: Boolean; inline;
      function IsEven: Boolean; inline;
      function Odd: Boolean; inline;
      function IsOdd: Boolean; inline;
      function Increase(const N: Integer = 1): Integer;
      function Decrease(const N: Integer = 1): Integer;
      function Increment(const N: Integer = 1): Integer;
      function Decrement(const N: Integer = 1): Integer;
      function DigitCount: Integer;
      function Digitz: TIntegerArray;
      function Digits: TIntegerArray;
      function NegA: Integer; inline;
      function Neg: Integer; inline;
      function Negative: Boolean; inline;
      function Positive: Boolean; inline;
      function Neutral: Boolean; inline;
      function Compare(const target: Integer): Integer; inline;
      function Precede(const target: Integer; const aAscending: Boolean): Boolean; overload;
      function Ascending(const target: Integer): Boolean; inline;
      function Descending(const target: Integer): Boolean; inline;
      function Distance(const T: Integer): Integer; inline;
      function Difference(const T: Integer): Integer; inline;
      function Opposite: Integer; inline;
      function Sign: Integer; inline;
      function Shuffle: Integer;
      function Over(const target: Integer): Boolean; inline;
      function Under(const target: Integer): Boolean; inline;
      function Oversize(const limit: Integer): Boolean; inline;
      function Undersize(const limit: Integer): Boolean; inline;
      function BitMax: Integer;
      function Unbitify: TBooleanArray; overload;
      function Unbitify(const bCount: Integer): TBooleanArray; overload;
    {$ENDIF}
    {$IFDEF Double}
      function ClampMin(const limit: Double): Double;
      function ClampMax(const limit: Double): Double;
      function Clamp(const minimum, maximum: Double): Double;
      function BoundMin(const limit: Double): Double;
      function BoundMax(const limit: Double): Double;
      function Bound(const minimum, maximum: Double): Double;
      function RestrictMin(const limit: Double): Double;
      function RestrictMax(const limit: Double): Double;
      function Restrict(const minimum, maximum: Double): Double;
      function LimitMin(const limit: Double): Double;
      function LimitMax(const limit: Double): Double;
      function Limit(const minimum, maximum: Double): Double;
      function ConstraintMin(const limit: Double): Boolean;
      function ConstraintMax(const limit: Double): Boolean;
      function Constraint(const minimum, maximum: Double): Boolean;
      function Increase(const N: Double = 1): Double;
      function Decrease(const N: Double = 1): Double;
      function Increment(const N: Double = 1): Double;
      function Decrement(const N: Double = 1): Double;
      function Digits: TIntegerArray;
      function NegA: Double; inline;
      function Neg: Double; inline;
      function Negative: Boolean; inline;
      function Positive: Boolean; inline;
      function Neutral: Boolean; inline;
      function MinDecimal: Double;
      function MaxDecimal: Double;
      function Accuracy(const a: Integer): Double;
      function Compare(const target: Double): Integer; inline;
      function Precede(const target: Double; const aAscending: Boolean): Boolean; overload;
      function Ascending(const target: Double): Boolean; inline;
      function Descending(const target: Double): Boolean; inline;
      function Distance(const T: Double): Double; inline;
      function Difference(const T: Double): Double; inline;
      function Opposite: Double; inline;
      function Sign: Integer; inline;
      function FixDegrees: Double;
      function Degrees: Double;
      function FixRadians: Double;
      function Radians(const compass: Boolean = False): Double;
      function Percent(const position: Double): Double; inline;
      function Percentage(const percent: Double): Double; inline;
      function Over(const target: Double): Boolean; inline;
      function Under(const target: Double): Boolean; inline;
      function Oversize(const limit: Double): Boolean;
      function Undersize(const limit: Double): Boolean;
    {$ENDIF}
    {$IFDEF string}
      function After(const s: string; const index: Integer = 1): string; overload;
      function After(const index: Integer; const count: Integer = 2147483647): string; overload;
      function Ahead(const s: string; const index: Integer = 2147483647): string; overload;
      function Ahead(const index: Integer; const count: Integer = 2147483647): string; overload;
      function Before(const s: string; const index: Integer = 1): string; overload;
      function Before(const index: Integer; const count: Integer = 2147483647): string; overload;
      function Behind(const s: string; const index: Integer = 2147483647): string; overload;
      function Behind(const index: Integer; const count: Integer = 2147483647): string; overload;
      function Blank: Boolean;
      function Amount(const s: string; const overlap: Boolean = True; const index: Integer = 2147483647): Integer;
      function At(const s: string; const index: Integer = 1): Boolean; inline;
      function Between(const s1, s2: string; const index: Integer = 1): string;
      function Chars: TCharArray;
      function Charify: TCharArray;
      function Chop: TCharArray;
      function Chunk(const a, b: Integer): string;
      function Center(const size: Integer; const fill: Char = #32): string;
      function Compare(const target: string): Integer; inline;
      function Precede(const target: string; const aAscending: Boolean): Boolean; overload;
      function Ascending(const target: string): Boolean; inline;
      function Descending(const target: string): Boolean; inline;
      function Contains(const s: string; const index: Integer = 1): Boolean;
      function Count(const s: string; const overlap: Boolean = True; const index: Integer = 1): Integer;
      function Duplicate(const x: Integer = 2): string;
      function Duplicated(const x: Integer; const glue: string): string;
      function Empty: Boolean;
      function EndsWith(const s: string): Boolean;
      function EndWith(const s: string; const index: Integer = 2147483647): Boolean;
      function Exch(const aIndex, bIndex: Integer): Boolean;
      function Exchange(const aIndex, bIndex: Integer): Boolean;
      function Exists: Boolean;
      function Explode: TCharArray; overload;
      function Explode(const d: string; const limit: Integer = -1): TStringArray; overload;
      function Explode(const d: TStringArray; const limit: Integer = -1): TStringArray; overload;
      function Find(const s: string; const index: Integer = 1): Integer;
      function Flip: string;
      function FromLeft(const count: Integer; const index: Integer = 1): string;
      function FromRight(const count: Integer; const index: Integer = 2147483647): string;
      function Get(const index: Integer; const count: Integer): string; inline;
      function IDs: TIntegerArray; overload;
      function IDs(const ID: TIntegerArray): TCharArray; overload;
      function IDs(const ID: TIntegerArray; const item: Char): TCharArray; overload;
      function IDs(const ID: TIntegerArray; const items: TCharArray): TCharArray; overload;
      function Includes(const s: string; const index: Integer = 2147483647): Boolean;
      function Loc(const s: string; const index: Integer = 2147483647): Integer;
      function Location(const s: string; const index: Integer = 2147483647): Integer;
      function Pick(const index: Integer; const count: Integer = 2147483647): string;
      function Pos(const s: string; const index: Integer = 1): Integer;
      function Position(const s: string; const index: Integer = 1): Integer;
      function Search(const s: string; const index: Integer = 1): Integer;
      function PregQuote(const regex: string = '.\+*?[^]$(){}=!<>|:-'): string;
      function Quotatation: string;
      function Reverse: Boolean;
      function Reversed: string;
      function Slice(const a, b: Integer): string;
      function StartsWith(const s: string): Boolean;
      function StartWith(const s: string; const index: Integer = 1): Boolean;
      function Stuff(const s: string; const iFrom, iCount: Integer): string;
      function TrimLeft(const t: Char = #32): string;
      function TrimRight(const t: Char = #32): string;
      function Trim(const t: Char = #32): string;
      function AsTRange: TRange;
      function Void: Boolean;
      function ToTRange(const glueRange: string = '..'; const openRange: Char = '['; const closeRange: Char = ']'): TRange;
      function IsBinary(const emptyTrue: Boolean = True): Boolean;
      function BoolifyBinary: TBooleanArray;
      function MadeOf(const allowed: TCharArray): Boolean;
      function FreeOf(const forbidden: TCharArray): Boolean;
      function BuiltWithout(const forbidden: TCharArray): Boolean;
      function Consists(const allowed: TCharArray): Boolean;
      function Pure(const allowed: TCharArray): Boolean;
      function BuiltWith(const blocks: TCharArray): Boolean;
    {$ENDIF}
    {$IFDEF Char}
      function Compare(const target: Char): Integer; inline;
      function Precede(const target: Char; const aAscending: Boolean): Boolean; overload;
      function Ascending(const target: Char): Boolean; inline;
      function Descending(const target: Char): Boolean; inline;
      function Str(const size: Integer = 1): string;
      function ToStr(const size: Integer = 1): string;
      function IsNumber: Boolean;
      function IsNumeric: Boolean;
      function IsLower: Boolean;
      function IsUpper: Boolean;
      function IsLowercase: Boolean;
      function IsUppercase: Boolean;
      function IsLetter: Boolean;
      function Swapcase: Char;
      function Upper: Char;
      function Lower: Char;
    {$ENDIF}
    {$IFDEF Boolean}
      function ToString: string;
      function Binary: Char;
      function BinaryDigit: Integer;
      function Bit: Integer; inline;
      function Bitify: Integer;
      function ToInteger: Integer;
      function AsInteger: Integer;
      function Toggle: Boolean;
      function Opposite: Boolean;
      function Switch: Boolean;
      function Flip: Boolean;
      function Shuffle: Boolean;
      function Select(const bTrue, bFalse: Integer): Integer; overload;
      function Select(const bTrue, bFalse: Int64): Int64; overload;
      function Select(const bTrue, bFalse: Double): Double; overload;
      function Select(const bTrue, bFalse: string): string; overload;
      function Select(const bTrue, bFalse: Char): Char; overload;
      function Select(const bTrue, bFalse: Boolean): Boolean; overload;
      function Select(const bTrue, bFalse: TPoint): TPoint; overload;
      function Select(const bTrue, bFalse: TBox): TBox; overload;
      function Select(const bTrue, bFalse: TRange): TRange; overload;
      function Evaluate(const bTrue, bFalse: Integer): Integer; overload;
      function Evaluate(const bTrue, bFalse: Int64): Int64; overload;
      function Evaluate(const bTrue, bFalse: Double): Double; overload;
      function Evaluate(const bTrue, bFalse: string): string; overload;
      function Evaluate(const bTrue, bFalse: Char): Char; overload;
      function Evaluate(const bTrue, bFalse: Boolean): Boolean; overload;
      function Evaluate(const bTrue, bFalse: TPoint): TPoint; overload;
      function Evaluate(const bTrue, bFalse: TBox): TBox; overload;
      function Evaluate(const bTrue, bFalse: TRange): TRange; overload;
      function Enable: Boolean;
      function Disable: Boolean;
      function SetFalse: Integer;
      function SetTrue: Integer;
      function SwitchOn(const state: Boolean): Boolean;
      function SwitchOff(const state: Boolean): Boolean;
    {$ENDIF}
    {$IFDEF TPoint}
      function Inside(const bx: TBox): Boolean; inline;
      function Clamp(const area: TBox): TPoint;
      function Create: TPoint; overload;
      function Grid(const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TPointArray;
      function Row(const cells: Integer; const space: Integer = 0): TPointArray;
      function Column(const cells: Integer; const space: Integer = 0): TPointArray;
      function Surrounding(const adjacency8: Boolean = True): TPointArray; overload;
      function Adjacent(const adjacency8: Boolean = True): TPointArray; overload;
      function Adjacency(const adjacency8: Boolean = True): TPointArray; overload;	  
      function Neighbours(const adjacency8: Boolean = True): TPointArray; overload;
      function Neighbors(const adjacency8: Boolean = True): TPointArray; overload;
      function ToY(const yGoal: Integer): TPointArray; overload;
      function ToX(const xGoal: Integer): TPointArray; overload;
      function Linked(const p: TPoint; const link: TPointArray): Boolean; overload;
      function Boxed(const xRadius, yRadius: Integer): TBox; overload;
      function Boxed(const radius: Integer = 0): TBox; overload;
      function ToBox(const width, height: Integer): TBox; overload;
      function ToBox(const size: Integer = 0): TBox; overload;
      function Boxify(const width, height: Integer): TBox; overload;
      function Boxify(const size: Integer = 0): TBox; overload;
	  function Within(const target: TPoint; const radius: Double; const distFunc: TDistanceFunction): Boolean; overload;
      function Within(const target: TPoint; const radius: Double = 1.0; const metric: TDistanceMetric = dmEuclidean): Boolean; overload;
      function Near(const target: TPoint; const radius: Double; const distFunc: TDistanceFunction): Boolean; overload;
      function Near(const target: TPoint; const radius: Double; const metric: TDistanceMetric): Boolean; overload;
      function Dist(const target: TPoint; const metric: TDistanceMetric = dmEuclidean): Double;
    {$ENDIF}
    {$IFDEF TBox}
      function Create: TBox; overload;
      function Inside(const targets: TBoxArray): Boolean; overload;
      function Grid(const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TBoxArray;
      function Row(const cells: Integer; const space: Integer = 0): TBoxArray;
      function Column(const cells: Integer; const space: Integer = 0): TBoxArray;
      function Placements(const target: TBox; const o: TPoint): TBoxArray; overload;
      function Placements(const target: TBox): TBoxArray; overload;
      function Tiled(const target: TBox): TBoxArray; overload;
      function Gridded(const target: TBox): TBoxArray; overload;
    {$ENDIF}
    {$IFDEF TRange}
      function Create: TRange; overload;
      function Distribute(const parts: Integer): TRangeArray;
      function Partition(const size: Integer): TRangeArray;
      function Divide(const size: Integer): TRangeArray;
      function Windows(const target: TRange): TRangeArray; overload;
      function Sectioned(const target: TRange): TRangeArray; overload;
      function Binned(const target: TRange): TRangeArray; overload;
    {$ENDIF}
  end;
  HArr = type helper for TArr
    function Add(const item: TVar; const duplicates: Boolean = True): TArr; overload;
    function Add(const items: TArr; const duplicates: Boolean = True): TArr; overload;
    function AllEqual: Boolean; overload;
    function AllSame: Boolean; overload;
    function AllUnique: Boolean; overload;
    function Any(const null: TVar): TVar; overload;
    function Any: TVar; overload;
    function Append(const item: TVar; const duplicates: Boolean = True): TArr; overload;
    function Append(const items: TArr; const duplicates: Boolean = True): TArr; overload;
    function As2D(const rows, columns: Integer): T2DArr; overload;
    function As2D(const width: Integer): T2DArr; overload;
    function Backwards: TArr; overload;
    function Blend(const items: TArr; const index: Integer = 2147483647): TArr; overload;
    function Build(const item: TVar; const aSize: Integer = 1): TArr; overload;
    function BuiltWith(const blocks: TArr): Boolean; overload;
    function MadeOf(const allowed: TArr): Boolean; overload;
    function FreeOf(const forbidden: TArr): Boolean; overload;
    function BuiltWithout(const forbidden: TArr): Boolean; overload;
    function Blit(const items: TArr; const index: Integer = 0): Integer; overload;
    function Classes: T2DArr; overload;
    function Classes(const weight: TIntegerArray): T2DArr; overload;
    function Classes(const weight: TDoubleArray): T2DArr; overload;
    function Classify: T2DArr; overload;
    function Classify(const weight: TIntegerArray): T2DArr; overload;
    function Classify(const weight: TDoubleArray): T2DArr; overload;
    function Clear: Boolean; overload;
    function Clone(const index: Integer = 0; const count: Integer = 2147483647): TArr; overload;
    function Clone(const ID: TIntegerArray): TArr; overload;
    function Cloned: TArr; overload;
    function Combine(const b: TArr): TArr; overload;
    function Components(const connections: TConnectionArray): T2DArr; overload;
    function Compact: Integer; overload;
    function Compacted: TArr; overload;
    function Compacted(const threshold: Integer): TArr; overload;
    function Compress: Integer; overload;
    function Compressed: TArr; overload;
    function Compressed(const threshold: Integer): TArr; overload;
    function Comprised(const items: TArr): Boolean; overload;
    function Constant(const item: TVar): Boolean; overload;
    function Constant: Boolean; overload;
    function Contains(const item: TVar; const index: Integer = 0): Boolean; overload;
    function Copied: TArr; overload;
    function Copy(const index: Integer = 0; const count: Integer = 2147483647): TArr; overload;
    function Create(const item: TVar): TArr; overload;
    function Create(const aSize: Integer; const item: TVar): TArr; overload;
    function Deduplicated: TArr; overload;
    function Delete(const index: Integer = 0): TArr; overload;
    function Delete(const ID: TIntegerArray): TArr; overload;
    function Differ(const target: TArr): Boolean; overload;
    function Disordered: TArr; overload;
    function Distinct: Integer; overload;
    function Distribute(const parts: Integer): T2DArr; overload;
    function Diversified: TArr; overload;
    function DiversifiedEx(const dAscending: Boolean = True): TArr; overload;
    function Domain: TRange; overload;
    function Drop(const item: TVar; const eraseDuplicates: Boolean = True): TArr; overload;
    function Dump(const items: TArr; const index: Integer = 0): TArr; overload;
    function Dupe: TArr; overload;
    function Duplicate(const xTimes: Integer = 1): TArr; overload;
    function Elements(const returnIDs: TIntegerArray; const returnSort: Boolean = True): TArr; overload;
    function Emplace(const item: TVar; const index: Integer = 0): Integer; overload;
    function Empty: Boolean; overload;
    function Equal(const target: TArr): Boolean; overload;
    function Erase(const item: TVar; const index: Integer = 2147483647; const all: Boolean = True): TArr; overload;
    function Erase(const item: TVar; const all: Boolean): TArr; overload;
    function Erase(const items: TArr; const index: Integer = 2147483647; const all: Boolean = True): TArr; overload;
    function Erase(const items: TArr; const all: Boolean): TArr; overload;
    function Exact(const items: TArr): Boolean; overload;
    function Excessive: Boolean; overload; 
    function Exch(const aIndex, bIndex: Integer): Boolean; overload;
    function Exchange(const aIndex, bIndex: Integer): Boolean; overload;
    function Exchange(var b: TArr): Integer; overload;
    function Exchange(const swaps: TConnectionArray): TArr; overload;
    function Exchanges(const target: TArr): TConnectionArray; overload;
    function Exclude(const items: TArr; const index: Integer = 2147483647): TArr; overload;
    function Exists: Boolean; overload;
    function Devein(const dIDs: TIntegerArray; const dValue: TVar): TArr; overload;
    function Devein(const dIDs: TIntegerArray): TArr; overload;
    function Expel(const eIDs: TIntegerArray): TArr; overload;
    function Extend(const item: TVar): TArr; overload;
    function Extend(const items: TArr): TArr; overload;
    function Extract(const item: TVar; const index: Integer = 0): TArr; overload;
    function Extract(const items: TArr; const index: Integer = 0): TArr; overload;
    function ExtractEvery(const X: Integer = 1; const index: Integer = 0): TArr; overload;
    function ExtractIDs(const allowed: TIntegerArray): TArr; overload;
    function ExtractIndexes(const allowed: TIntegerArray; const aSorted: Boolean = False): TArr; overload;
    function Feed(const item: TVar; const allowDuplicates: Boolean = False): Integer; overload;
    function Fill(const item: TVar; const index: Integer = 0; const count: Integer = 2147483647): TArr; overload;
    function Fill(const items: TArr; const index: Integer = 0; const count: Integer = 2147483647): TArr; overload;
    function Filter(const item: TVar; const index: Integer = 0): TArr; overload;
    function Filter(const items: TArr; const index: Integer = 0): TArr; overload;
    function FilterEvery(const X: Integer = 1; const index: Integer = 0): TArr; overload;
    function FilterIDs(const forbidden: TIntegerArray): TArr; overload;
    function FilterIndexes(const forbidden: TIntegerArray; const fSorted: Boolean = False): TArr; overload;
    function Find(const ID: TRange; const item: TVar): Integer; overload;
    function Find(const ID: TIntegerArray; const item: TVar): Integer; overload;
    function Find(const ID: TRange; const items: TArr): Integer; overload;
    function Find(const ID: TIntegerArray; const items: TArr): Integer; overload;
    function First: Integer; overload;
    function First(const item: TVar): Integer; overload;
    function First(const items: TArr): Integer; overload;
    function Fit: Integer; overload;
    function Fit(const aSize: Integer): Integer; overload;
    function Fit(const aBounds: TRange): Integer; overload;
    function Fits(const maxValue: Integer): Boolean; overload;
    function Fits(const target: TRange): Boolean; overload;
    function Flip: Boolean; overload;
    function Free: Integer; overload;
    function FromLeft(const count: Integer; const index: Integer = 2147483647): TArr; overload;
    function FromRight(const count: Integer; const index: Integer = 0): TArr; overload;
    function Get: TArr; overload;
    function Get(const ID: TIntegerArray): TArr; overload;
    function Get(const ID: TRange): TArr; overload;
    function Group: T2DArr; overload;
    function Group(const weight: TIntegerArray; const wSorted: Boolean = False): T2DArr; overload;
    function Group(const weight: TDoubleArray; const wSorted: Boolean = False): T2DArr; overload;
    function Grow(const item: TVar; const allowDuplicates: Boolean = False): Integer; overload;
    function Holds(const chain: TArr): Boolean; overload;
    function Homogeneous(const item: TVar): Boolean; overload;
    function Homogeneous: Boolean; overload;
    function ID(const aAscending: Boolean = True): TIntegerArray; overload;
    function IDs(const aAscending: Boolean = True): TIntegerArray; overload;
    function IDs(const ID: TIntegerArray): TArr; overload;
    function IDs(const ID: TIntegerArray; const item: TVar): TArr; overload;
    function IDs(const ID: TIntegerArray; const items: TArr): TArr; overload;
    function Includes(const item: TVar; const index: Integer = 2147483647): Boolean; overload;
    function Indexed(const aAscending: Boolean = True): TIntegerArray; overload;
    function Indexes(const aAscending: Boolean = True): TIntegerArray; overload;
    function Indices(const aAscending: Boolean = True): TIntegerArray; overload;
    function Inject(const items: TArr; const index: Integer = 2147483647): Integer; overload;
    function Keep(const items: TArr; const index: Integer = 0): TArr; overload;
    function Kill: Integer; overload;
    function Last: Integer; overload;
    function Last(const item: TVar): Integer; overload;
    function Last(const items: TArr): Integer; overload;
    function LeastCommon: TVar; overload;
    function LeastFrequent: TVar; overload;
    function Len: Integer; overload;
    function Loc(const item: TVar; const index: Integer = 2147483647): Integer; overload;
    function Loc(const items: TArr; const index: Integer = 2147483647): Integer; overload;
    function Location(const item: TVar; const index: Integer = 2147483647): Integer; overload;
    function Location(const items: TArr; const index: Integer = 2147483647): Integer; overload;
    function Locations(const item: TVar; const index: Integer = 2147483647): TIntegerArray; overload;
    function Locations(const items: TArr; const index: Integer = 2147483647): TIntegerArray; overload;
    function Locations: TIntegerArray; overload;
    function Mix(const mixings: Integer = 1): Boolean; overload;
    function Mixed(const mixings: Integer = 1): TArr; overload;
    function MostCommon: TVar; overload;
    function MostFrequent: TVar; overload;
    function Movement(const moves: TConnectionArray): TArr; overload;
    function Movements(const target: TArr): TConnectionArray; overload;
    function Multi(const threshold: Integer = 2): Boolean; overload;
    function Multi(const threshold: TRange): Boolean; overload;
    function Next(const index: Integer; const count: Integer = 2147483647): TArr; overload;
    function Occurs(const item: TVar; const occurrence: Integer = 1): Boolean; overload;
    function Overlay(const items: TArr; const index: Integer; const init: TVar): TArr; overload;
    function Overlay(const items: TArr; const index: Integer = 0): TArr; overload;
    function Oversize(const limit: Integer): Boolean; overload;
    function Partition(const pSize: Integer): T2DArr; overload;
    function Patch(const index: Integer; const items: TArr): Integer; overload;
    function Plain: Boolean; overload;
    function Pick(const items: TArr; const index: Integer = 0): TArr; overload;
    function Pop: TVar; overload;
    function Pop(const null: TVar): TVar; overload;
    function Populate(const items: TArr; const times: Integer = 1): Boolean; overload;
    function Populate(const item: TVar; const times: Integer = 1): Boolean; overload;
    function Populated(const population: TRange): Boolean; overload;
    function Populated(const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload;
    function Pos(const item: TVar; const index: Integer = 0): Integer; overload;
    function Pos(const items: TArr; const index: Integer = 0): Integer; overload;
    function Position(const item: TVar; const index: Integer = 0): Integer; overload;
    function Position(const items: TArr; const index: Integer = 0): Integer; overload;
    function Positions(const item: TVar; const index: Integer = 0): TIntegerArray; overload;
    function Positions(const items: TArr; const index: Integer = 0): TIntegerArray; overload;
    function Positions: TIntegerArray; overload;
    function Prepend(const items: TArr; const index: Integer = 0): Integer; overload;
    function Presence(const item: TVar; const occurrence: Integer = 1): Boolean; overload;
    function Previous(const index: Integer; const count: Integer = 2147483647): TArr; overload;
    function Prune: Integer; overload;
    function Pruned: TArr; overload;
    function Pruned(const threshold: Integer): TArr; overload;
    function Pull: TArr; overload;
    function Purified(const dAscending: Boolean = True): TArr; overload;
    function Purify(const dAscending: Boolean = True): Integer; overload;
    function Push(const item: TVar): TArr; overload;
    function Push(const items: TArr): TArr; overload;
    function Put(const ID: TIntegerArray; const item: TVar): TArr; overload;
    function Put(const ID: TIntegerArray; const items: TArr): TArr; overload;
    function Put(const index: Integer; const items: TArr): TArr; overload;
    function Randomized: TArr; overload;
    function Range(const subArray: TArr; const index: Integer = 0): TRange; overload;
    function Ranges(const subArray: TArr; const index: Integer = 0): TRangeArray; overload;
    function Recreate(const arrSize: Integer): Boolean; overload;
    function Reject(const items: TArr; const index: Integer = 2147483647): TArr; overload;
    function Remove(const item: TVar; const index: Integer = 0; const all: Boolean = True): TArr; overload;
    function Remove(const item: TVar; const all: Boolean): TArr; overload;
    function Remove(const items: TArr; const index: Integer = 0; const all: Boolean = True): TArr; overload;
    function Remove(const items: TArr; const all: Boolean): TArr; overload;
    function Reposition(const oldIndex, newIndex: Integer): Boolean; overload;
    function Reset: Integer; overload;
    function Resize(const aChange: Integer): Integer; overload;
    function Resize(const aChange: Integer; const null: TVar): Integer; overload;
    function Reversal: TArr; overload;
    function Reverse: Boolean; overload;
    function Reversed: TArr; overload;
    function Reversion: TArr; overload;
    function Sample(const sSize: Integer): TArr; overload;
    function Scan(const ID: TRange; const item: TVar; const limit: Integer = 2147483647): TIntegerArray; overload;
    function Scan(const ID: TIntegerArray; const item: TVar; const limit: Integer = 2147483647): TIntegerArray; overload;
    function Scan(const ID: TRange; const items: TArr; const limit: Integer = 2147483647): TIntegerArray; overload;
    function Scan(const ID: TIntegerArray; const items: TArr; const limit: Integer = 2147483647): TIntegerArray; overload;
    function Scramble(const swaps: Integer = -1): TArr; overload;
    function Shake(const shakes: Integer = 1): TArr; overload;
    function Shift: TVar; overload;
    function Shift(const sCount: Integer): TArr; overload;
    function Shuffle(const shuffles: Integer = 1): TArr; overload;
    function Singular: Boolean; overload;
    function Size: Integer; overload;
    function Size(const aSize: Integer): TArr; overload;
    function Size(const aSize: Integer; const null: TVar): TArr; overload;
    function SizeBetween(const sMin, sMax: Integer): Boolean; overload;
    function SizeMax(const target: Integer): Boolean; overload;
    function SizeMin(const target: Integer): Boolean; overload;
    function Slice(const r: TRange): TArr; overload;
    function Slice(const r: TRangeArray): TArr; overload;
    function Slots: TIntegerArray; overload;
    function Some: TArr; overload;
    function Some(const amount: Integer): TArr; overload;
    function Span: TRange; overload;
    function Span(const subArray: TArr; const index: Integer = 2147483647): TRange; overload;
    function Spans(const subArray: TArr; const index: Integer = 2147483647): TRangeArray; overload;
    function Strip(const item: TVar; const eraseDuplicates: Boolean = True): TArr; overload;
    function SubarrayLocation(const pattern: TArr): Integer; overload;
    function SubarrayLocations(const pattern: TArr): TIntegerArray; overload;
    function SubarrayPosition(const pattern: TArr): Integer; overload;
    function SubarrayPositions(const pattern: TArr): TIntegerArray; overload;
    function Subset(const items: TArr): Boolean; overload;
    function Supply(const item: TVar): Integer; overload;
    function Supply(const items: TArr): Integer; overload;
    function To2D(const rows, columns: Integer): T2DArr; overload;
    function To2D(const height: Integer): T2DArr; overload;
    function ToIndexes: TIntegerArray; overload;
    function Trade(var b: TArr): Integer; overload;
    function Undersize(const limit: Integer): Boolean; overload;
    function Uncluttered: TArr; overload;
    function Uniform: Boolean; overload;
    function Uniform(const item: TVar): Boolean; overload;
    function Uniformity: Double; overload;
    function Unified(const dAscending: Boolean = True): TArr; overload;
    function Unify(const dAscending: Boolean = True): Integer; overload;
    function Unduplicated: TArr; overload;
    function Uniqued: TArr; overload;
    function Uniques: TIntegerArray; overload;
    function Unshift(const item: TVar): TArr; overload;
    function Unshift(const items: TArr): TArr; overload;
    function Void: Boolean; overload;
    function Waste: Integer; overload;
    function Zigzag(const zAscending: Boolean = True): TArr; overload;
    {$IFDEF Sortable}
      function Sortable: Boolean; overload;
      function Sorted(const aAscending: Boolean = True): Boolean; overload;
      function InOrder(const aAscending: Boolean = True): Boolean; overload;
      function Orderly: Boolean; overload;
      function Ordered(const aAscending: Boolean = True; const index: Integer = 0): Boolean; overload;
      function Order: Integer; overload;
      function Orientation: Integer; overload;
      function Descend: TArr; overload;
      function Ascend: TArr; overload;
      function Descending: Boolean; overload;
      function Ascending: Boolean; overload;
      function Decreasing: Boolean; overload;
      function Increasing: Boolean; overload;
      function Downward: Boolean; overload;
      function Upward: Boolean; overload;
      function Lowest: TVar; overload;
      function Highest: TVar; overload;
      function Mini(const aAscending: Boolean = True; const start: Integer = -1): Integer; overload;
      function Mini(const start: Integer; const aAscending: Boolean = True): Integer; overload;
      function Maxi(const aAscending: Boolean = True; const start: Integer = -1): Integer; overload;
      function Maxi(const start: Integer; const aAscending: Boolean = True): Integer; overload;
      function Mode: TVar; overload;
      function Center: TVar; overload;
      function MergeSortPair(var partner: TArr; const aAscending: Boolean = True): Integer; overload;
      function MergeSortIndexed(const aAscending: Boolean = True): TIntegerArray; overload;
      function QuickSortPair(var partner: TArr; const aAscending: Boolean = True): Integer; overload;
      function QuickSortSwapped(const aAscending: Boolean = True): TConnectionArray; overload;
      function QuickSortIndexed(const aAscending: Boolean = True): TIntegerArray; overload;
      function QuickSortedly(const aAscending: Boolean = True): TIntegerArray; overload;
      function QuickSorted(const aAscending: Boolean = True): TArr; overload;
      function QuickSort(const aAscending: Boolean = True): Integer; overload;
      function QuickSort3W(const aAscending: Boolean = True): Integer; overload;
	  function QSort(const aAscending: Boolean = True): Integer; overload;  
      function PartitionSort(const aAscending: Boolean = True): Integer; overload;
	  function CoctailSort(const aAscending: Boolean = True): Integer; overload;
      function CoctailSort2(const aAscending: Boolean = True): Integer; overload;
      function GnomeSort(const aAscending: Boolean = True): Integer; overload;
      function GnomeSortOptimized(const aAscending: Boolean = True): Integer; overload;
      function PancakeSort(const aAscending: Boolean = True): Integer; overload;
      function BubbleSort(const aAscending: Boolean = True): Integer; overload;
      function BubbleSort2(const aAscending: Boolean = True): Integer; overload;
      function BubbleSortOptimized(const aAscending: Boolean = True): Integer; overload;
      function CombSort(const aAscending: Boolean = True): Integer; overload;
      function HeapSort(const aAscending: Boolean = True): Integer; overload;
      function InsertionSort(const aAscending: Boolean = True): Integer; overload;
      function SelectionSort(const aAscending: Boolean = True): Integer; overload;
      function SelectionSortBidirectional(const aAscending: Boolean = True): Integer; overload;
      function SelectionSortBidirectional2(const aAscending: Boolean = True): Integer; overload;
      function ShellSort(const aAscending: Boolean = True): Integer; overload;
      function MergeSort(const aAscending: Boolean = True): Integer; overload;
      function MergeSortBU(const aAscending: Boolean = True): Integer; overload;
      function HybridSort(const aAscending: Boolean = True): Integer; overload;
      function Uniq(const sSorted: Boolean = False): TArr; overload;
      function Downtrending: Boolean; overload;
      function Uptrending: Boolean; overload;
      function Notrending: Boolean; overload;
      function Trend: Integer; overload;
      function Trending: Boolean; overload;
      function Rising: Boolean; overload;
      function Falling: Boolean; overload;
      function Direction: Integer; overload;
      function TrendFalling: Boolean; overload;
      function TrendRising: Boolean; overload;
    {$ENDIF}
    function MergeSortWeighted(var weight: TIntegerArray; const aAscending: Boolean = True): Integer; overload;
    function MergeSortWeighted(var weight: TDoubleArray; const aAscending: Boolean = True): Integer; overload;
    function QuickSortWeighted(var weight: TIntegerArray; const aAscending: Boolean = True): Integer; overload;
    function QuickSortWeighted(var weight: TDoubleArray; const aAscending: Boolean = True): Integer; overload;
    function QuickSorted(const weight: TIntegerArray; const aAscending: Boolean = True): TArr; overload;
    function QuickSorted(const weight: TDoubleArray; const aAscending: Boolean = True): TArr; overload;
    {$IFDEF Integer}
      function Bounds: TRange; overload;
      function Bounds(var aSize: Integer): TRange; overload;
      function BoundingRange: TRange;
      function Boundaries: TRange;
      function Range: TRange;
      function Coverage: TRange;
      function MinMax: TRange;
      function Region: TRange; overload;
      function Extent: TRange;
      function Undupe: TIntegerArray;
      function Unduped: TIntegerArray;
      function Numberline: TIntegerArray;
      function Sum: Int64;
      function Density: Double;
      function Occupancy: Double;
      function Saturated: Double;
      function Mean: Double;
      function Median: Double;
      function Middle: Double;
      function MostFreq(const null: Integer = -2147483648): Integer;
      function LeastFreq(const null: Integer = -2147483648): Integer;
      function Succ(const currentIndex: Integer; const range: TRange): Integer; overload;
      function Pred(const currentIndex: Integer; const range: TRange): Integer; overload;
      function Successor(const currentIndex: Integer; const range: TRange; const aAscending: Boolean = True): Integer; overload;
      function Predecessor(const currentIndex: Integer; const range: TRange; const aAscending: Boolean = True): Integer; overload;
      function Next(const currentIndex: Integer; const range: TRange): Integer; overload;
      function Previous(const currentIndex: Integer; const range: TRange): Integer; overload;
      function Navigate(const currentIndex: Integer; const range: TRange; const aAscending: Boolean = True): Integer; overload;
      function Advance(const currentIndex: Integer; const range: TRange; const aAscending: Boolean = True): Integer; overload;
      function Retreat(const currentIndex: Integer; const range: TRange; const aAscending: Boolean = True): Integer; overload;
      function RadixSort(const aAscending: Boolean = True): Integer;
      function Split(const minDiff, maxDiff: Integer): T2DIntegerArray; overload;
      function Split(const diff: Integer): T2DIntegerArray; overload;
      function Sblit(const minDiff, maxDiff: Integer): T2DIntegerArray; overload;
      function Sblit(const diff: Integer): T2DIntegerArray; overload;
      function Groups(const aSorted: Boolean = False): T2DIntegerArray; overload;
      function Group(const minDiff, maxDiff: Integer): T2DIntegerArray; overload;
      function Group(const diff: Integer): T2DIntegerArray; overload;
      function Groub(const minDiff, maxDiff: Integer): T2DIntegerArray; overload;
      function Groub(const diff: Integer): T2DIntegerArray; overload;
      function Clique(const minDiff, maxDiff: Integer): T2DIntegerArray; overload;
      function Clique(const diff: Integer): T2DIntegerArray; overload;
      function Knit(const minDiff, maxDiff: Integer): T2DIntegerArray; overload;
      function Knit(const diff: Integer): T2DIntegerArray; overload;
      function Reflected: TIntegerArray; overload;
      function Reflect: Integer; overload;
      function Invert: TIntegerArray;
      function Inverted(const arrBounds: TRange): TIntegerArray; overload;
      function Inverted: TIntegerArray; overload;
      function Inverse(const arrBounds: TRange): TIntegerArray; overload;
      function Inverse: TIntegerArray; overload;
      function Mirror: Boolean;
      function MinVal: Integer; overload;
      function MaxVal: Integer; overload;
      function Minimum(var index: Integer): Integer; overload;
      function Minimum: Integer; overload;
      function Maximum(var index: Integer): Integer; overload;
      function Maximum: Integer; overload;
      function Pure(const allowed: TIntegerArray): Boolean;
      function NoneOf(const forbidden: TIntegerArray): Boolean;
      function AnyOf(const candidates: TIntegerArray): Boolean;
      function AllOf(const candidates: TIntegerArray): Boolean;
      function Reinit: Integer; overload;
      function Charify: TCharArray; overload;
      function Charify(var str: string): TCharArray; overload;
      function Stringify: string; overload;
      function Stringify(var chars: TCharArray): string; overload;
      function Special: Boolean;
      function ExtractEven: TIntegerArray; overload;
      function FilterEven: TIntegerArray; overload;
      function ExtractOdd: TIntegerArray; overload;
      function FilterOdd: TIntegerArray; overload;
      function Attach(const items: TIntegerArray): Integer; overload;
      function Embed(const items: TIntegerArray; const index: Integer = 2147483647): Integer; overload;
      function Broaden(const rValues: TRange; const aIndex: Integer): TRange; overload;
      function Broaden(const rValues: TRange; const sSorted: Boolean = False): TRange; overload;
	  function BSort(const aAscending: Boolean = True): Integer;
      function BinarySort(const aAscending: Boolean = True): Integer;
      function BinarySorted(const aAscending: Boolean = True): TIntegerArray;
      function BinaryBoundL(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinaryBoundR(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinaryPosL(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinaryPosR(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinarySearch(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinarySeek(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinaryContains(const x: Integer; const aAscending: Boolean = True): Boolean;
      function BinaryCount(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinaryLocate(const x: Integer; const aAscending: Boolean = True): TRange;
      function BinaryLocation(const x: Integer; const aAscending: Boolean = True): TRange;
      function BinaryAppend(const x: Integer; const aAscending: Boolean = True): Integer;
      function BinaryAdd(const x: Integer; const aAscending: Boolean = True): TIntegerArray;
      function BinarySearchF(const x: TRange; const aAscending: Boolean = True): Integer;
      function BinarySearchL(const x: TRange; const aAscending: Boolean = True): Integer;
      function BinaryPrune(const aAscending: Boolean = True): Integer;
      function BinaryPruned(const aAscending: Boolean = True): TIntegerArray;
      function BinaryUndupe: Integer;
      function BinaryUnduped: TIntegerArray;
      function BinaryUnified(const dAscending: Boolean = True): TIntegerArray;
      function BinaryGrow(const x: Integer; const aAscending: Boolean = True): Boolean;
      function BinaryShrink(const x: Integer; const aAscending: Boolean = True): Boolean;
      function BinaryLowerBound(const x: Integer; const aAscending: Boolean): Integer; overload;
      function BinaryUpperBound(const x: Integer; const aAscending: Boolean): Integer; overload;
      function BinaryRange(const x: TRange; const aAscending: Boolean = True): TRange; overload;
      function BinaryRange(const x: Integer; const aAscending: Boolean = True): TRange; overload;
      function BinarySpan(const x: TRange; const aAscending: Boolean = True): TRange; overload;
      function BinaryMerge(const items: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload;
      function BinaryMerged(const items: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload;
      function BinaryCombine(const items: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload;
      function BinaryRemove(const val: Integer; const all: Boolean = True; const aAscending: Boolean = True): Integer; overload;
      function BinaryFind(const val: Integer; const aAscending: Boolean): Integer; overload;
      function BinarySearchEx(const x: Integer; const ignore: Integer = -2147483648; const aAscending: Boolean = True): Integer; overload;
      function BMerge(const items: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload;
      function BMerged(const items: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload;
    {$ENDIF}
    {$IFDEF Double}
      function Reinit: Integer; overload;
      function Attach(const items: TDoubleArray): Integer; overload;
      function Embed(const items: TDoubleArray; const index: Integer = 2147483647): Integer; overload;
      function BSort(const aAscending: Boolean = True): Integer;
      function BinarySort(const aAscending: Boolean = True): Integer;
      function BinarySorted(const aAscending: Boolean = True): TDoubleArray;
      function BinaryBoundL(const x: Double; const aAscending: Boolean = True): Integer;
      function BinaryBoundR(const x: Double; const aAscending: Boolean = True): Integer;
      function BinaryPosL(const x: Double; const aAscending: Boolean = True): Integer;
      function BinaryPosR(const x: Double; const aAscending: Boolean = True): Integer;
      function BinarySearch(const x: Double; const aAscending: Boolean = True): Integer;
      function BinarySeek(const x: Double; const aAscending: Boolean = True): Integer;
      function BinaryContains(const x: Double; const aAscending: Boolean = True): Boolean;
      function BinaryCount(const x: Double; const aAscending: Boolean = True): Integer;
      function BinaryLocate(const x: Double; const aAscending: Boolean = True): TRange;
      function BinaryLocation(const x: Double; const aAscending: Boolean = True): TRange;
      function BinaryAppend(const x: Double; const aAscending: Boolean = True): Integer;
      function BinaryAdd(const x: Double; const aAscending: Boolean = True): TDoubleArray;
      function BinarySearchF(const x: TRange; const aAscending: Boolean = True): Integer;
      function BinarySearchL(const x: TRange; const aAscending: Boolean = True): Integer;
      function BinaryPrune(const aAscending: Boolean = True): Integer;
      function BinaryPruned(const aAscending: Boolean = True): TDoubleArray;
      function BinaryUndupe: Integer;
      function BinaryUnduped: TDoubleArray;
      function BinaryUnified(const dAscending: Boolean = True): TDoubleArray;
      function BinaryGrow(const x: Double; const aAscending: Boolean = True): Boolean;
      function BinaryShrink(const x: Double; const aAscending: Boolean = True): Boolean;
      function BinaryLowerBound(const x: Double; const aAscending: Boolean): Integer; overload;
      function BinaryUpperBound(const x: Double; const aAscending: Boolean): Integer; overload;
      function BinaryRange(const x: TRange; const aAscending: Boolean = True): TRange; overload;
      function BinaryRange(const x: Double; const aAscending: Boolean = True): TRange; overload;
      function BinarySpan(const x: TRange; const aAscending: Boolean = True): TRange; overload;
      function BinaryMerge(const items: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; overload;
      function BinaryMerged(const items: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; overload;
      function BinaryCombine(const items: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; overload;
      function BinaryRemove(const val: Double; const all: Boolean = True; const aAscending: Boolean = True): Integer; overload;
      function BinaryFind(const val: Double; const aAscending: Boolean): Integer; overload;
      function BinarySearchEx(const x: Double; const ignore: Double = -2147483648; const aAscending: Boolean = True): Integer; overload;
    {$ENDIF}
    {$IFDEF string}
      function Tally: Int64;
      function Concat: string;
      function Concatenate: string;
      function Flatten: string;
      function Glue: string;
    {$ENDIF}
    {$IFDEF Char}
      function Str: string;
      function ToStr: string;
      function Join: string; overload;
      function Join(const glue: string): string; overload;
      function Stringify: string; overload;
      function Stringify(const glue: string): string; overload;
      function Ordinals: TIntegerArray;
      function Unduped: TCharArray;
      function TSA: TStringArray;
    {$ENDIF}
    {$IFDEF Boolean}
      function Select(const sTrue, sFalse: Integer): TIntegerArray; overload;
      function Select(const sTrue, sFalse: Double): TDoubleArray; overload;
      function Select(const sTrue, sFalse: string): TStringArray; overload;
      function Select(const sTrue, sFalse: Char): TCharArray; overload;
      function Select(const sTrue, sFalse: Boolean): TBooleanArray; overload;
      function Select(const sTrue, sFalse: TPoint): TPointArray; overload;
      function Select(const sTrue, sFalse: TBox): TBoxArray; overload;
      function Select(const sTrue, sFalse: TRange): TRangeArray; overload;
      function Bits: Integer;
      function Bitify: Integer;
      function ToBits: Integer;
      function Digits: TIntegerArray; overload;
      function Falsed: Boolean; overload;
      function Falseless: Boolean; overload;
      function Falseless(const maxFalse: Integer): Boolean; overload;
      function Falseness: Integer; overload;
      function Falses: TIntegerArray; overload;
      function Falsesome: Boolean; overload;
      function Falsesome(const minFalse: Integer): Boolean; overload;
      function Str(const separator: string; const strTrue: string = 'True'; strFalse: string = 'False'): string; overload;
      function Str: string; overload;
      function Text(const strTrue, strFalse, separator: string): string; overload;
      function Text(const strTrue: string = 'True'; strFalse: string = 'False'): string; overload;
      function TIA(const valTrue: Integer = 1; const valFalse: Integer = 0): TIntegerArray; overload;
      function Toggle: TBooleanArray; overload;
      function Trued: Boolean; overload;
      function Trueless: Boolean; overload;
      function Trueless(const maxTrue: Integer): Boolean; overload;
      function Trueness: Integer; overload;
      function Trues: TIntegerArray; overload;
      function Truesome: Boolean; overload;
      function Truesome(const minTrue: Integer): Boolean; overload;
      function Opposite: TBooleanArray; overload;
      function BinaryStr: string;
      function BinaryDigits: TIntegerArray;
      function Binary: string;
      function Reinit: Integer; overload;
      function Occupancy(const val: Boolean = True): Double; overload;
      function Attach(const items: TBooleanArray): Integer; overload;
      function Embed(const items: TBooleanArray; const index: Integer = 2147483647): Integer; overload;
    {$ENDIF}
    {$IFDEF TPoint}
      function Binify(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Binify(const radius: Double; const metric: TDistanceMetric = dmEuclidean): T2DPointArray; overload;
      function Binified(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Binified(const radius: Double; const metric: TDistanceMetric = dmEuclidean): T2DPointArray; overload;
      function Bounds: TBox; overload;
      function Bounds(var width, height: Integer): TBox; overload;
      function BoundingBox: TBox;
      function Boundaries: TBox;
      function Box: TBox;
      function Boxed: TBox;
      function MinMax: TBox;
      function Region: TBox; overload;
      function Coverage: TBox; overload;
      function Undupe: TPointArray;
      function Unduped: TPointArray;
      function Invert: TPointArray;
      function Inverted(const arrBounds: TBox): TPointArray; overload;
      function Inverted: TPointArray; overload;
      function Inverse(const arrBounds: TBox): TPointArray; overload;
      function Inverse: TPointArray; overload;
      function Edge(const scan8W: Boolean = False): TPointArray;
      function FloodFill(const start: TPoint; const area: TBox; const scan8W: Boolean = False): TPointArray; overload;
      function FloodFill(const start: TPoint; const scan8W: Boolean = False): TPointArray; overload;
      function Xs: TIntegerArray; overload;
      function Ys: TIntegerArray; overload;
      function XValues: TIntegerArray; overload;
      function YValues: TIntegerArray; overload;
      function Unzip(var xArr, yArr: TIntegerArray): Integer;
      function Zip(const xArr, yArr: TIntegerArray): Integer;
      function Extent: TBox;
      function Vertical: TRange; overload;
      function Horizontal: TRange; overload;
      function Neighborify(const adjacency8: Boolean = True): T2DPointArray; overload;
      function Regionize(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Regionize(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Regionize(const radius: Double = 1.0): T2DPointArray; overload;
      function RSplit(const xRadius, yRadius: Integer; const sSorted: Boolean = False): T2DPointArray; overload;
      function RSplit(const radius: Double; const distFunc: TDistanceFunction; const sSorted: Boolean = False): T2DPointArray; overload;
      function RSplit(const radius: Double = 1.0; const sSorted: Boolean = False): T2DPointArray; overload;
      function CSplit(const xRadius, yRadius: Integer; const sSorted: Boolean = False): T2DPointArray; overload;
      function CSplit(const radius: Double; const distFunc: TDistanceFunction; const sSorted: Boolean = False): T2DPointArray; overload;
      function CSplit(const radius: Double = 1.0; const sSorted: Boolean = False): T2DPointArray; overload;  
      function XSplit(const xRadius, yRadius: Integer; const sSorted: Boolean = False): T2DPointArray; overload;
      function XSplit(const radius: Double; const distFunc: TDistanceFunction; const sSorted: Boolean = False): T2DPointArray; overload;
      function XSplit(const radius: Double = 1.0; const sSorted: Boolean = False): T2DPointArray; overload;
      function YSplit(const xRadius, yRadius: Integer; const sSorted: Boolean = False): T2DPointArray; overload;
      function YSplit(const radius: Double; const distFunc: TDistanceFunction; const sSorted: Boolean = False): T2DPointArray; overload;
      function YSplit(const radius: Double = 1.0; const sSorted: Boolean = False): T2DPointArray; overload;
      function Split(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Split(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Split(const radius: Double = 1.0): T2DPointArray; overload;
      function SplitEx(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function SplitEx(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function SplitEx(const radius: Double = 1.0): T2DPointArray; overload;
      function Clusters(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Clusters(const radius: Double = 1.0): T2DPointArray; overload;
      function Clusters(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Cluster(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Cluster(const radius: Double = 1.0): T2DPointArray; overload;
      function Cluster(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Clustered(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Clustered(const radius: Double = 1.0): T2DPointArray; overload;
      function Clustered(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Clusterify(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Clusterify(const radius: Double = 1.0): T2DPointArray; overload;
      function Clusterify(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Clusterize(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
	  function Clusterize(const radius: Double = 1.0): T2DPointArray; overload;
      function Clusterize(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Segment(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Segment(const radius: Double = 1.0): T2DPointArray; overload;
	  function Segment(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Fragment(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Fragment(const radius: Double = 1.0): T2DPointArray; overload;
	  function Fragment(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Groups(const adjacency8: Boolean = True): T2DPointArray; overload;
      function Grouping(const adjacency8: Boolean = True): T2DPointArray; overload;
      function Grouped(const adjacency8: Boolean = True): T2DPointArray; overload;
      function Groupify(const adjacency8: Boolean = True): T2DPointArray; overload;
      function XClassify(const pSorted: Boolean = False): T2DPointArray; overload;
      function YClassify(const pSorted: Boolean = False): T2DPointArray; overload;
      function Axes(var X, Y: TIntegerArray): Integer; overload;
      function Axed: T2DIntegerArray; overload;
      function Axed(var X, Y: TIntegerArray): Integer; overload;
      function SortByRow(const aAscending: Boolean = True): Integer; overload;
      function SortByColumn(const aAscending: Boolean = True): Integer; overload;
      function SortedByIndex(const aAscending: Boolean = True): TPointArray; overload;
      function Attach(const items: TPointArray): Integer; overload;
      function Embed(const items: TPointArray; const index: Integer = 2147483647): Integer; overload;
      function FrameLinks(const dist: Integer; const area: TBox): TPointArray; overload;
      function FrameLinks(const dist: Integer = 1): TPointArray; overload;
      function Reinit: Integer; overload;
      function XVals(const aAscending: Boolean = True): TIntegerArray;
      function YVals(const aAscending: Boolean = True): TIntegerArray;
      function XArr(const aAscending: Boolean = True): TIntegerArray;
      function YArr(const aAscending: Boolean = True): TIntegerArray;
      function XAxis(const rUnique: Boolean = True): TIntegerArray; overload;
      function YAxis(const rUnique: Boolean = True): TIntegerArray; overload;
      function X2D(var yArr: TIntegerArray; const xOrder: Boolean = True; const xAscending: Boolean = True): T2DIntegerArray; overload;
      function Y2D(var xArr: TIntegerArray; const yOrder: Boolean = True; const yAscending: Boolean = True): T2DIntegerArray; overload;
      function Blobs(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Blobs(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Blobs(const radius: Double = 1.0): T2DPointArray; overload;
      function Blobify(const xRadius, yRadius: Integer): T2DPointArray; overload;
      function Blobify(const radius: Double; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function Blobify(const radius: Double = 1.0): T2DPointArray; overload;
      function YTo2D(var xArr: TIntegerArray; var selfIDs: T2DIntegerArray): T2DIntegerArray; overload;
      function YTo2D(var xArr: TIntegerArray): T2DIntegerArray; overload;
      function XTo2D(var yArr: TIntegerArray; var selfIDs: T2DIntegerArray): T2DIntegerArray; overload;
      function XTo2D(var yArr: TIntegerArray): T2DIntegerArray; overload;
      function YAs2D(var xArr: TIntegerArray; var selfIDs: T2DIntegerArray): T2DIntegerArray; overload;
      function YAs2D(var xArr: TIntegerArray): T2DIntegerArray; overload;
      function XAs2D(var yArr: TIntegerArray; var selfIDs: T2DIntegerArray): T2DIntegerArray; overload;
      function XAs2D(var yArr: TIntegerArray): T2DIntegerArray; overload;
      function DBSCAN(const radius: Double; const minPts: Integer; const distFunc: TDistanceFunction): T2DPointArray; overload;
      function DBSCAN(const radius: Double = 1.0; const minPts: Integer = 2; const metric: TDistanceMetric = dmEuclidean): T2DPointArray; overload;
      function DBSCAN(const xRadius, yRadius: Integer; const minPts: Integer): T2DPointArray; overload;
      function Nearby(const target: TPoint; const radius: Double; const distFunc: TDistanceFunction): TPointArray; overload;
      function Nearby(const target: TPoint; const radius: Double = 1.0; const metric: TDistanceMetric = dmEuclidean): TPointArray; overload;
      function Nearby(const target: TPoint; const xRadius, yRadius: Integer): TPointArray; overload;
      function Nearby(const targets: TPointArray; const radius: Double; const distFunc: TDistanceFunction): TPointArray; overload;
	  function Nearby(const targets: TPointArray; const radius: Double = 1.0; const metric: TDistanceMetric = dmEuclidean): TPointArray; overload;
      function Nearby(const targets: TPointArray; const xRadius, yRadius: Integer): TPointArray; overload;
      function CorePointsMax(const maximumNeighbours: Integer; const xRadius, yRadius: Integer): TPointArray; overload;
      function CorePointsMax(const maximumNeighbours: Integer; const radius: Double; const metric: TDistanceMetric = dmEuclidean): TPointArray; overload;
      function CorePointsMin(const minimumNeighbours: Integer; const xRadius, yRadius: Integer): TPointArray; overload;
      function CorePointsMin(const minimumNeighbours: Integer; const radius: Double; const metric: TDistanceMetric = dmEuclidean): TPointArray; overload;
      function CorePoints(const allowedNeighbours: TRange; const radius: Double; const metric: TDistanceMetric = dmEuclidean): TPointArray; overload;
      function CorePoints(const allowedNeighbours: TRange; const xRadius, yRadius: Integer): TPointArray; overload;	  
    {$ENDIF}
    {$IFDEF TBox}
      function X1s: TIntegerArray; overload;
      function X2s: TIntegerArray; overload;
      function Y1s: TIntegerArray; overload;
      function Y2s: TIntegerArray; overload;
      function X1Values: TIntegerArray; overload;
      function X2Values: TIntegerArray; overload;
      function Y1Values: TIntegerArray; overload;
      function Y2Values: TIntegerArray; overload;
      function Unzip(var x1Arr, y1Arr, x2Arr, y2Arr: TIntegerArray): Integer;
      function Zip(const x1Arr, y1Arr, x2Arr, y2Arr: TIntegerArray): Integer;
      function Bounds: TBox; overload;
      function Boundaries: TBox; overload;
    {$ENDIF}	
    {$IFDEF TRange}
      function Bounds: TRange; overload;
      function Range: TRange; overload;
      function TIA: TIntegerArray;
      function T2DIA: T2DIntegerArray;
      function Starting: TIntegerArray; overload;
      function Stopping: TIntegerArray; overload;
      function Normalized: TRangeArray; overload;
      function Gaps: TRangeArray; overload;
      function Starts: TIntegerArray; overload;
      function Stops: TIntegerArray; overload;
      function StartValues: TIntegerArray; overload;
      function StopValues: TIntegerArray; overload;
      function Unzip(var startArr, stopArr: TIntegerArray): Integer;
      function Zip(const startArr, stopArr: TIntegerArray): Integer;
    {$ENDIF}
    {$IFDEF TSegment}
    {$ENDIF}
    {$IFDEF TCircle}
    {$ENDIF}
    {$IFDEF TTriangle}
    {$ENDIF}	
    end;
  H2DArr = type helper for T2DArr
    function Blank: Boolean; overload;
    function Empty: Boolean; overload;
    function Flat: TArr; overload;
    function Flatten: TArr; overload;
    function Irregular: Boolean; overload;
    function Jagged: Boolean; overload;
    function Merge: TArr; overload;
    function Merged: TArr; overload;
    function Ragged: Boolean; overload;
    function Fit: Integer; overload;
    function Fit(const aSize: Integer): Integer; overload;
    function Fit(const aBounds: TRange): Integer; overload;
    function Size(var lengths: TIntegerArray): Int64; overload;
    function Size: Int64; overload;
    function Total: Int64; overload;
    function Population: Int64; overload;
    function Census: Int64; overload;
    function Inventory(var items: TArr): Int64; overload;
    function Inventory: Int64; overload;
    function TArray: TArr; overload;
    function Unwrap: TArr; overload;
    function Kill: Integer; overload;
    function Kill(const k2D: TIntegerArray): Int64; overload;
    function Free: Int64; overload;
    function Recreate(const arrSize: Integer): Boolean; overload;
    function Reset: Int64; overload;
    function Destroy: Int64; overload;
    function Pull: T2DArr; overload;
    function To1D: TArr; overload;
    function Linearize: TArr; overload;
  end;
